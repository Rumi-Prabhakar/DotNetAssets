using NLog;
using DNA.Entities;
using Microsoft.Extensions.Options;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.OpenApi.Models;
using NLog.Extensions.Logging;
using Swashbuckle.AspNetCore.Filters;

namespace DNA.WebAPI
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            var config = builder.Configuration;
            LogManager.Setup().LoadConfigurationFromFile(string.Concat(Directory.GetCurrentDirectory(), "Nlog.config"));

            builder.Services.ConfigureLoggingService();
            
            builder.Services.ConfigureCors();
            builder.Services.ConfigureIISIntegration();
            builder.Configuration.AddJsonFile(string.Concat(Directory.GetCurrentDirectory(),"\\", "appSettings.json"));

            //Enable SensitiveDataLogging to analyse sql queries being generated by EF.Core,
            //using NLogLoggerFactory

            if (builder.Environment.IsDevelopment())
            {
                builder.Services.AddDbContext<DotNetAssetsContext>(
                   optionsBuilder => optionsBuilder
                  .UseSqlServer(builder.Configuration.GetConnectionString("sqlConnection"))
                  .EnableSensitiveDataLogging()
                  .UseLoggerFactory(new NLogLoggerFactory()));
            }
            else
            {
                builder.Services.AddDbContext<DotNetAssetsContext>(
                     optionsBuilder => optionsBuilder
                    .UseSqlServer(builder.Configuration.GetConnectionString("sqlConnection")));
            }

            builder.Services.ConfigureAuthentication(config);
            builder.Services.AddAuthorization();

            builder.Services.AddAutoMapper(typeof(Program).Assembly);
            builder.Services.ConfigureRepositoryManager();
            builder.Services.ConfigureServiceManager();
            builder.Services.ConfigureBusinessServices();

            builder.Services.AddControllers();
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen(options =>
            {
                options.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme
                { 
                    Description = "Standard Authorization header using the Bearer scheme (\"bearer {token}\")",
                    In = ParameterLocation.Header,
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey
                });
                options.OperationFilter<SecurityRequirementsOperationFilter>();
            });


            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            //app.UseHttpsRedirection();

            app.UseAuthentication();
            app.UseAuthorization();

            app.MapControllers();

            app.Run();
        }
    }
}